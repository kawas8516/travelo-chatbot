# llm_integration/services.py

import logging
from .utils import get_llm_response, get_intent_response

logger = logging.getLogger(__name__)

class ChatbotService:
    """
    Service class for handling chatbot interactions. This class provides methods for 
    generating responses based on predefined intents or by calling a Large Language Model (LLM).
    """
    
    def __init__(self):
        """
        Initialize the ChatbotService instance.
        """
        self.chat_history = []

    def generate_response(self, user_input):
        """
        Generate a response to user input, either using predefined intents or the LLM.

        Args:
            user_input (str): The input message from the user.

        Returns:
            str: The chatbot's response.
        """
        logger.info(f"Received user input: {user_input}")

        # Check if input matches a predefined intent
        intent_response = get_intent_response(user_input)
        if intent_response:
            logger.info(f"Responding with intent-based response: {intent_response}")
            return intent_response

        # Fallback to generating response from LLM
        llm_response = get_llm_response(user_input)
        logger.info(f"Generated LLM response: {llm_response}")
        return llm_response

    def update_chat_history(self, user_input, bot_response):
        """
        Updates the chat history with the latest interaction.

        Args:
            user_input (str): The latest message from the user.
            bot_response (str): The response generated by the bot.
        """
        self.chat_history.append({"user": user_input, "bot": bot_response})
        logger.info(f"Updated chat history with user input and bot response.")
        
    def get_chat_history(self):
        """
        Retrieve the current chat history.

        Returns:
            list: The chat history as a list of dictionaries with 'user' and 'bot' keys.
        """
        return self.chat_history
